---
layout: post
title:  "LeetCode 307: Range Sum Query - Mutable"
date:   2015-12-22 22:04:00
categories: LeetCode
tags: [LeetCode, Data Structure]
---

###区间和问题

>Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.    
>The update(i, val) function modifies nums by updating the element at index i to val.    
>Example:    
>```
>Given nums = [1, 3, 5]        
>sumRange(0, 2) -> 9    
>update(1, 2)    
>sumRange(0, 2) -> 8   
>```   
>Note:   
>The array is only modifiable by the update function.You may assume the number of calls to update and sumRange function is distributed evenly.   


这是求区间和的进阶题目，要求能够随时更新。    
如果使用原来的解法，由于update操作需要O(n)的复杂度，因此会TLE。    
直观解法（LeetCode上TLE）

{% highlight Java %}
public class NumArray {
    public int[] sumArray;
    public NumArray(int[] nums) {
        this.sumArray = new int[nums.length];
        for(int i = 0; i < nums.length; i++){
            if(i == 0){
                this.sumArray[i] = nums[i];
            }
            else{
                this.sumArray[i] = this.sumArray[i-1] + nums[i];
            }
        }
    }
    void update(int i, int val) {
        int origin = 0;
        if(i == 0){
            origin = this.sumArray[i];
        }
        else{
            origin = this.sumArray[i] - this.sumArray[i-1];
        }
        
        int dif = val - origin;
        for(int k = i; k < this.sumArray.length; k++){
            this.sumArray[k] += dif;
        }
        
    }
    public int sumRange(int i, int j) {
        if(i == 0){
            return this.sumArray[j];
        }
        else{
            return this.sumArray[j] - this.sumArray[i-1];
        }
    }
}
// Your NumArray object will be instantiated and called as such:
// NumArray numArray = new NumArray(nums);
// numArray.sumRange(0, 1);
// numArray.update(1, 10);
// numArray.sumRange(1, 2);
{% endhighlight %}

我们需要使用一种先进的数据结构：线段数。  
参考 [博客](http://www.cnblogs.com/tanky_woo/archive/2010/09/25/1834523.html)  的说明，大致了解线段数的结构。  
在本题中，可以使用线段数对区间和进行保存，不断更新。代码如下：  

{% highlight Java %}
public class NumArray {

    public class SegmentTreeNode {
        public int start;
        public int end;
        public SegmentTreeNode left;
        public SegmentTreeNode right;
        public int sum;
        
        public SegmentTreeNode(int start, int end){
            this.start = start;
            this.end = end;
            this.left = null;
            this.right = null;
            this.sum = 0;
        }
    }
    
    public SegmentTreeNode buildTree(int[] nums, int start, int end){
        if(start > end){
            return null;
        }
        else{
            SegmentTreeNode ret = new SegmentTreeNode(start, end);
            if(start == end){
                ret.sum = nums[start];
            }
            else{
                int mid = start + (end - start) / 2;
                ret.left = this.buildTree(nums, start, mid);
                ret.right = this.buildTree(nums, mid + 1, end);
                ret.sum = ret.left.sum + ret.right.sum;
            }
            return ret;
        }
    }
    public void updateTree(SegmentTreeNode root, int i, int val){
        if(root.start == root.end){
            root.sum = val;
        }
        else{
            int mid = root.start + (root.end - root.start) / 2;
            if(i <= mid){
                this.updateTree(root.left, i, val);
            }
            else{
                this.updateTree(root.right, i, val);
            }
            root.sum = root.left.sum + root.right.sum;
        }
    }
    
    public int sumRangeTree(SegmentTreeNode root, int start, int end){
        if(root.end == end && root.start == start){
            return root.sum;
        }
        else{
            int mid = root.start + (root.end - root.start) / 2;
            if(end <= mid){
                return this.sumRangeTree(root.left, start, end);
            }
            else if(start >= mid + 1){
                return this.sumRangeTree(root.right, start, end);
            }
            else{
                return this.sumRangeTree(root.left, start, mid) + this.sumRangeTree(root.right, mid + 1, end);
            }
        }
    }
    
    public SegmentTreeNode root = null;
    
    public NumArray(int[] nums) {
        
        this.root = this.buildTree(nums, 0, nums.length - 1);
        
    }

    void update(int i, int val) {
        this.updateTree(this.root, i, val);
    }

    public int sumRange(int i, int j) {
        return this.sumRangeTree(this.root, i, j);
    }
}
// Your NumArray object will be instantiated and called as such:
// NumArray numArray = new NumArray(nums);
// numArray.sumRange(0, 1);
// numArray.update(1, 10);
// numArray.sumRange(1, 2);
{% endhighlight %}

* * *

值得一提的是，这里有玄学，一开始这代码总是TLE，见鬼了。

我寻找错误对比原文找了10分钟，一字未改再提交一次就AC了。